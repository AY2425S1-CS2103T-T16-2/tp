plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
    id 'jacoco'
}

mainClassName = 'seedu.address.Main'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '10.2'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    jvmArgs = [
            '--add-exports=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED',
            '--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
            '--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED'
    ]

    // Headless mode for Linux (Ubuntu)
    if (System.getProperty("os.name").toLowerCase().contains("linux")) {
        jvmArgs += [
                '-Djava.awt.headless=true',
                '-Dtestfx.robot=glass',       // Use TestFX's headless robot
                '-Dtestfx.headless=true',     // Run TestFX in headless mode
                '-Dprism.order=sw',           // Use software rendering
                '-Dprism.verbose=true'        // Verbose logging for Prism rendering
        ]
    }
}

task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.required = true
        xml.required = true
    }
}

dependencies {
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '17.0.7'

    // Platform-specific JavaFX dependencies
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: detectOS()
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: detectOS()
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: detectOS()
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: detectOS()

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.4.0'
}

shadowJar {
    archiveFileName = 'addressbook.jar'
}

defaultTasks 'clean', 'test'

// Helper method to detect platform for JavaFX
def detectOS() {
    def osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("win")) {
        return "win"
    } else if (osName.contains("mac")) {
        return "mac"
    } else {
        return "linux"
    }
}
